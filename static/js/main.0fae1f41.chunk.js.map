{"version":3,"sources":["components/MyPieChart.js","components/Avatar.js","components/GithubApp.js","App.js","serviceWorker.js","index.js"],"names":["MyPieChart","languages","userfullname","title","width","height","chartType","loader","data","options","Avatar","imgSrc","this","props","src","className","Image","alt","roundedCircle","Component","GithubApp","useState","username","setUsername","setLanguages","fetching","setFetching","errormsg","setErrormsg","setUserfullname","avatarsrc","setAvatarsrc","followers","setFollowers","following","setFollowing","myHeaders","Headers","authHeader","btoa","process","append","requestOptions","method","headers","redirect","fetchUser","a","fetch","resp","json","user","name","avatar_url","fetchUserdetails","userRepositories","length","languageMap","Map","forEach","repo","language","has","set","get","l","push","value","key","type","placeholder","onChange","event","target","Button","variant","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0fae1f41.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nconst MyPieChart = ({languages, userfullname}) => {\r\n\r\n    const title = `${userfullname}'s preferred Languages`;\r\n\r\n    return(\r\n        <div>\r\n\r\n            <Chart\r\n                width={'600px'}\r\n                height={'400px'}\r\n                chartType=\"PieChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={languages}\r\n                options={{\r\n                    title: title,\r\n                }}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPieChart;","import React, { Component } from 'react';\r\nimport './Avatar.scss';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nclass Avatar extends Component {\r\n\r\n    render() {\r\n\r\n        const imgSrc = this.props.src;\r\n\r\n        return(\r\n            <div className=\"avatarContainer\">\r\n                <Image alt=\"userImage\" src={imgSrc} roundedCircle />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { useState } from 'react';\r\nimport './GithubApp.scss';\r\nimport MyPieChart from './MyPieChart';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from './Avatar';\r\n\r\nconst GithubApp = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [languages, setLanguages] = useState([]);\r\n    const [fetching, setFetching] = useState(false);\r\n    const [errormsg, setErrormsg] = useState(\"\");\r\n    const [userfullname, setUserfullname] = useState(\"\");\r\n    const [avatarsrc, setAvatarsrc] = useState(\"\");\r\n    const [followers, setFollowers] = useState(0);\r\n    const [following, setFollowing] = useState(0);\r\n\r\n    const myHeaders = new Headers();\r\n    const authHeader = \"Basic \" + btoa(process.env.REACT_APP_GITHUB_CLIENT_ID + \":\" + process.env.REACT_APP_GITHUB_CLIENT_SECRET);\r\n    myHeaders.append(\"Authorization\", authHeader);\r\n\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const fetchUser = async () => {\r\n        setFetching(true);\r\n        const resp = await fetch(`https://api.github.com/users/${username}`, requestOptions);\r\n        const user = await resp.json();\r\n        if(user) { \r\n            setUserfullname(user.name);\r\n            setAvatarsrc(user.avatar_url);\r\n            setFollowers(user.followers);\r\n            setFollowing(user.following);\r\n        } else {\r\n            setErrormsg(\"Not a valid user\");\r\n        }\r\n\r\n        fetchUserdetails();\r\n        setFetching(false);\r\n    }\r\n\r\n    const fetchUserdetails = async () => {\r\n        setFetching(true);\r\n        const resp = await fetch(`https://api.github.com/users/${username}/repos`, requestOptions);\r\n        const userRepositories = await resp.json();\r\n        if(userRepositories && userRepositories.length > 0) {\r\n            const languageMap = new Map();\r\n            userRepositories.forEach((repo) => {\r\n                if(repo.language) {\r\n                    if(languageMap.has(repo.language)) {\r\n                        languageMap.set(repo.language, languageMap.get(repo.language)+1);\r\n                    } else {\r\n                        languageMap.set(repo.language, 1);\r\n                    }\r\n                }\r\n            });\r\n            setLanguages([]);\r\n            const l = [];\r\n            l.push([\"Languages\", \"Count\"]);\r\n            languageMap.forEach((value, key) => {\r\n                l.push([key, value]);\r\n                \r\n            });\r\n            setLanguages(languages => l);\r\n        } else {\r\n            setErrormsg(\"Not a valid user\");\r\n        }\r\n        setFetching(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>What language does User code in?</h3>\r\n            <p>(based on user's contributions to public Github repositories)</p>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter User's Github username\"\r\n                value={username}\r\n                onChange={handleChange}\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={fetchUser}\r\n            >\r\n                Fetch\r\n            </Button>\r\n            <div>\r\n                {errormsg}\r\n            </div>\r\n            <div>\r\n                {languages.length > 0 && !fetching\r\n                    &&\r\n                    <div>\r\n                        <div>\r\n                            {\r\n                                avatarsrc &&\r\n                                <Avatar src={avatarsrc} />\r\n                            }\r\n                            {\r\n                                userfullname &&\r\n                                <span><br/>{userfullname}</span>\r\n                            }\r\n                            {\r\n                                followers &&\r\n                                <p>Followers: {followers}</p>\r\n                            }\r\n                            {\r\n                                following &&\r\n                                <p>Following {following}</p>\r\n                            }\r\n                        </div>\r\n                        <MyPieChart languages={languages} userfullname={userfullname} />\r\n                    </div>    \r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GithubApp;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GithubApp from './components/GithubApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <GithubApp />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}